name: Deploy AI Word Prediction App

on:
  push:
    branches: [main]
    paths:
      - "how-ai-works/**"
  workflow_dispatch: # Allow manual triggering

env:
  PROJECT_ID: novalark-prod
  GAR_LOCATION: us-central1
  REPOSITORY: ai-apps
  SERVICE: ai-word-prediction
  REGION: us-central1

jobs:
  deploy:
    permissions:
      contents: read
      id-token: write

    runs-on: ubuntu-latest
    environment: Prod
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker to use gcloud as a credential helper
        run: |
          gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev

      - name: Build and Push Container
        run: |
          cd how-ai-works
          docker build -t "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE:$GITHUB_SHA" \
                       -t "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE:latest" .
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE:$GITHUB_SHA"
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE:latest"

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}
          flags: |
            --allow-unauthenticated
            --memory=4Gi
            --cpu=2
            --timeout=3600
            --max-instances=10
            --concurrency=80
            --port=8000
            --set-env-vars=PORT=8000

      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}

      - name: Create deployment summary
        run: |
          echo "## üöÄ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Service URL:** ${{ steps.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE:$GITHUB_SHA" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** $REGION" >> $GITHUB_STEP_SUMMARY
          echo "**Memory:** 4Gi" >> $GITHUB_STEP_SUMMARY
          echo "**CPU:** 2 cores" >> $GITHUB_STEP_SUMMARY
          echo "**Authentication:** Workload Identity Federation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** First visit may take 2-3 minutes to load the AI model." >> $GITHUB_STEP_SUMMARY

      - name: Post deployment health check
        run: |
          echo "Waiting for service to be ready..."
          sleep 30
          SERVICE_URL="${{ steps.deploy.outputs.url }}"

          # Wait up to 5 minutes for the service to respond
          for i in {1..10}; do
            if curl -s --max-time 30 "$SERVICE_URL/health" > /dev/null; then
              echo "‚úÖ Service is healthy!"
              break
            else
              echo "‚è≥ Attempt $i/10: Service not ready yet, waiting..."
              sleep 30
            fi
          done
